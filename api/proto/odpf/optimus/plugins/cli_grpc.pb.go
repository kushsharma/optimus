// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package optimus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CLIClient is the client API for CLI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CLIClient interface {
	// GetQuestions list down all the cli inputs required to generate spec files
	// name used for question will be directly mapped to DefaultConfig() parameters
	GetQuestions(ctx context.Context, in *GetQuestions_Request, opts ...grpc.CallOption) (*GetQuestions_Response, error)
	ValidateQuestion(ctx context.Context, in *ValidateQuestion_Request, opts ...grpc.CallOption) (*ValidateQuestion_Response, error)
	// DefaultConfig are a set of configuration which will be embedded in job
	// specification. These configs can be requested by the docker container before
	// execution
	// It will be generated based on results of GetQuestions from user, it also inherit
	// its parent config if any
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultConfig(ctx context.Context, in *DefaultConfig_Request, opts ...grpc.CallOption) (*DefaultConfig_Response, error)
	// DefaultAssets are a set of files which will be embedded in job
	// specification in assets folder. These configs can be requested by the
	// docker container before execution.
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultAssets(ctx context.Context, in *DefaultAssets_Request, opts ...grpc.CallOption) (*DefaultAssets_Response, error)
	// CompileAssets overrides the default asset compilation behaviour
	CompileAssets(ctx context.Context, in *CompileAssets_Request, opts ...grpc.CallOption) (*CompileAssets_Response, error)
}

type cLIClient struct {
	cc grpc.ClientConnInterface
}

func NewCLIClient(cc grpc.ClientConnInterface) CLIClient {
	return &cLIClient{cc}
}

func (c *cLIClient) GetQuestions(ctx context.Context, in *GetQuestions_Request, opts ...grpc.CallOption) (*GetQuestions_Response, error) {
	out := new(GetQuestions_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.plugins.CLI/GetQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) ValidateQuestion(ctx context.Context, in *ValidateQuestion_Request, opts ...grpc.CallOption) (*ValidateQuestion_Response, error) {
	out := new(ValidateQuestion_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.plugins.CLI/ValidateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) DefaultConfig(ctx context.Context, in *DefaultConfig_Request, opts ...grpc.CallOption) (*DefaultConfig_Response, error) {
	out := new(DefaultConfig_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.plugins.CLI/DefaultConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) DefaultAssets(ctx context.Context, in *DefaultAssets_Request, opts ...grpc.CallOption) (*DefaultAssets_Response, error) {
	out := new(DefaultAssets_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.plugins.CLI/DefaultAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cLIClient) CompileAssets(ctx context.Context, in *CompileAssets_Request, opts ...grpc.CallOption) (*CompileAssets_Response, error) {
	out := new(CompileAssets_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.plugins.CLI/CompileAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLIServer is the server API for CLI service.
// All implementations must embed UnimplementedCLIServer
// for forward compatibility
type CLIServer interface {
	// GetQuestions list down all the cli inputs required to generate spec files
	// name used for question will be directly mapped to DefaultConfig() parameters
	GetQuestions(context.Context, *GetQuestions_Request) (*GetQuestions_Response, error)
	ValidateQuestion(context.Context, *ValidateQuestion_Request) (*ValidateQuestion_Response, error)
	// DefaultConfig are a set of configuration which will be embedded in job
	// specification. These configs can be requested by the docker container before
	// execution
	// It will be generated based on results of GetQuestions from user, it also inherit
	// its parent config if any
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultConfig(context.Context, *DefaultConfig_Request) (*DefaultConfig_Response, error)
	// DefaultAssets are a set of files which will be embedded in job
	// specification in assets folder. These configs can be requested by the
	// docker container before execution.
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultAssets(context.Context, *DefaultAssets_Request) (*DefaultAssets_Response, error)
	// CompileAssets overrides the default asset compilation behaviour
	CompileAssets(context.Context, *CompileAssets_Request) (*CompileAssets_Response, error)
	mustEmbedUnimplementedCLIServer()
}

// UnimplementedCLIServer must be embedded to have forward compatible implementations.
type UnimplementedCLIServer struct {
}

func (UnimplementedCLIServer) GetQuestions(context.Context, *GetQuestions_Request) (*GetQuestions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedCLIServer) ValidateQuestion(context.Context, *ValidateQuestion_Request) (*ValidateQuestion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateQuestion not implemented")
}
func (UnimplementedCLIServer) DefaultConfig(context.Context, *DefaultConfig_Request) (*DefaultConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultConfig not implemented")
}
func (UnimplementedCLIServer) DefaultAssets(context.Context, *DefaultAssets_Request) (*DefaultAssets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultAssets not implemented")
}
func (UnimplementedCLIServer) CompileAssets(context.Context, *CompileAssets_Request) (*CompileAssets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileAssets not implemented")
}
func (UnimplementedCLIServer) mustEmbedUnimplementedCLIServer() {}

// UnsafeCLIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CLIServer will
// result in compilation errors.
type UnsafeCLIServer interface {
	mustEmbedUnimplementedCLIServer()
}

func RegisterCLIServer(s grpc.ServiceRegistrar, srv CLIServer) {
	s.RegisterService(&CLI_ServiceDesc, srv)
}

func _CLI_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.plugins.CLI/GetQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).GetQuestions(ctx, req.(*GetQuestions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_ValidateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateQuestion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).ValidateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.plugins.CLI/ValidateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).ValidateQuestion(ctx, req.(*ValidateQuestion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_DefaultConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).DefaultConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.plugins.CLI/DefaultConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).DefaultConfig(ctx, req.(*DefaultConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_DefaultAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultAssets_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).DefaultAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.plugins.CLI/DefaultAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).DefaultAssets(ctx, req.(*DefaultAssets_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CLI_CompileAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileAssets_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIServer).CompileAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.plugins.CLI/CompileAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIServer).CompileAssets(ctx, req.(*CompileAssets_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CLI_ServiceDesc is the grpc.ServiceDesc for CLI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CLI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.optimus.plugins.CLI",
	HandlerType: (*CLIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestions",
			Handler:    _CLI_GetQuestions_Handler,
		},
		{
			MethodName: "ValidateQuestion",
			Handler:    _CLI_ValidateQuestion_Handler,
		},
		{
			MethodName: "DefaultConfig",
			Handler:    _CLI_DefaultConfig_Handler,
		},
		{
			MethodName: "DefaultAssets",
			Handler:    _CLI_DefaultAssets_Handler,
		},
		{
			MethodName: "CompileAssets",
			Handler:    _CLI_CompileAssets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/optimus/plugins/cli.proto",
}
